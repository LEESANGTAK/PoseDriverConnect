Skeleton Configs
===============================

The skeleton config is away to customize Pose Wranglers functionality to meet the needs of a variety of skeletons. By
default, Pose Wrangler ships with examples for working with the standard UE5 skeleton and the MetaHuman skeletons.

The config is a JSON file that contains information that Pose Wrangler can use to handle retargeting, exporting and
mirroring.

Retargeting/Exporting
^^^^^^^^^^^^^^^^^^^^^^

The `retargeting` section of the config aims to provide support for working with a driver/bind skeleton setup.

The `transform_mapping` is a key:value map between the driver and bind skeleton. All the joints you wish to retarget
must be explicitly called out in this section. The `transform_mapping` is also used on export in order to find the
joints needed to export out the fbx animation sequences for each solver.

.. important:: If you do not have a driver/bind skeleton setup, simply specifying the root joint in the
    `transform_mapping` is sufficient for exporting to work correctly. i.e `"root": "root"`


.. code-block:: JSON

    {
        "retargeting": {
            "transform_mapping": {
                "root_drv": "root",
                "ankle_bck_l_drv": "ankle_bck_l",
                "ankle_bck_r_drv": "ankle_bck_r",
                "ankle_fwd_l_drv": "ankle_fwd_l",
                "ankle_fwd_r_drv": "ankle_fwd_r"
            },
            "import": {
                "source": 1,
                "target": 0
            },
            "export": {
                "source": 0,
                "target": 1
            }
        }
    }

The other subsections under `retargeting` are `import` and `export`. These sections provide a way to retarget the
solvers to different transforms when a json file is loaded/saved. This is specifically useful for the driver/bind setup
where the solvers are authored on the driver skeleton and needs to be loaded on the bind skeleton inside Unreal.

During the import process, the `source` key refers to the which set of transforms it expects to find inside the Pose
Wrangler JSON file from the `transform_mapping`. `0` refers to the `transform_mapping` keys i.e `root_drv`,
`ankle_bck_l_drv` etc and `1` refers to the `transform_mapping` values i.e `root`, `ankle_bck_l` etc.

The `target` refers to the set of transforms that will replace the `source` transforms. So in the example above on
import the retargeter will find `root` inside the Pose Wrangler JSON file and replace it with `root_drv`. Likewise when
the JSON file is exported, the retargeter will find occurrences of `root_drv` and replace it with `root`.

Mirror Mapping
^^^^^^^^^^^^^^^^^^^^^

Mirror mapping enables Pose Wrangler to support custom skeletons when mirroring RBF solvers and poses.

Below is the mirror mapping for characters following the MetaHuman naming conventions:

  .. code-block:: JSON

    {
      "mirror_mapping": {
            "solver_expression": "(?P<prefix>[a-zA-Z0-9]+)?(?P<side>_[lr]{1}_)(?P<suffix>[a-zA-Z0-9_]+)",
            "transform_expression": "(?P<prefix>[a-zA-Z0-9_]+)?(?P<side>_[lr]{1}_)(?P<suffix>[a-zA-Z0-9_]+)",
            "left": {
                "solver_syntax": "_l_",
                "transform_syntax": "_l_"
                },
            "right": {
                "solver_syntax": "_r_",
                "transform_syntax": "_r_"
            }
        }
    }

.. list-table:: Title
   :widths: 25 50
   :header-rows: 1

   * - Key
     - Definition
   * - solver_expression
     - A regular expression used to match against the solver node name
   * - transform_expression
     - A regular expression used to match against the transform (joint) node name
   * - left
     - dictionary containing the expected match for the solver_expression and |br| transform_expression
   * - right
     - dictionary containing the expected match for the solver_expression and |br| transform_expression


.. note::
    As an example if we wanted to mirror a solver called ``calf_l_UERBFSolver`` we first try to match the name
    of the solver against the ``solver_expression``. If the match fails, you'll see an error appear in the output
    log that the solver name doesn't match the settings defined in mirror mapping.

    If the match succeeds, it will then iterate through the groups in the matchdict to determine if one of the groups
    matches the ``solver_syntax`` for the left hand side. If it does, it will replace it with the right and vice versa.

    In this case, we will end up with a matchdict that looks something like this: |br|
    ``{"prefix": "calf", "side": "_l_", "suffix": "UERBFSolver"}`` |br|
    The mapping will iterate through this dictionary and attempt to match each value against the ``solver_syntax`` of
    the ``left`` and ``right`` group defined in mirror mapping. If it matches the ``left`` group it will replace the
    ``side`` value with the ``solver_syntax`` specified in the ``right`` group resulting in the following dictionary: |br|
    ``{"prefix": "calf", "side": "_r_", "suffix": "UERBFSolver"}`` |br|

    The same thing then happens for the drivers and driven transforms associated with the solver, using ``transform_expression``
    and ``transform_syntax`` in place of the solver.

.. |br| raw:: html

     <br>